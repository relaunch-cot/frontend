// Gerenciador de Presen√ßa Global de Usu√°rios
class PresenceManager {
  constructor() {
    this.ws = null;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = 5;
    this.reconnectDelay = 3000;
    this.heartbeatInterval = null;
    this.isIntentionallyClosed = false;
    this.userId = null;
    this.token = null;
    this.onlineUsers = new Set(); // IDs dos usu√°rios online
    this.offlineTimeouts = new Map(); // Timeouts pendentes para marcar como offline
    this.OFFLINE_DELAY = 5000; // 5 segundos de delay antes de marcar offline
  }

  // Conecta ao WebSocket de presen√ßa global
  connect(userId, token) {
    if (!userId || !token) {
      console.error('UserId e token s√£o necess√°rios para conectar ao sistema de presen√ßa');
      return;
    }

    this.userId = userId;
    this.token = token;

    // URL do WebSocket para presen√ßa global
    const WS_BASE_URL = window.ENV_CONFIG?.WS_BACKEND || 'ws://localhost:8080';
    const wsUrl = `${WS_BASE_URL}/v1/ws/presence?userId=${userId}&token=${encodeURIComponent(token)}`;

    try {
      this.ws = new WebSocket(wsUrl);
      this.setupEventHandlers();
    } catch (error) {
      console.error('Erro ao criar conex√£o WebSocket de presen√ßa:', error);
      this.scheduleReconnect();
    }
  }

  // Configura os event handlers
  setupEventHandlers() {
    this.ws.onopen = () => {
      console.log('üü¢ Sistema de presen√ßa conectado');
      this.reconnectAttempts = 0;
      this.startHeartbeat();
      
      // Dispara evento de conex√£o
      window.dispatchEvent(new CustomEvent('presenceConnected', { 
        detail: { userId: this.userId } 
      }));
    };

    this.ws.onmessage = (event) => {
      try {
        // Log da mensagem bruta para debug
        console.log('üì® Presen√ßa (raw):', event.data);
        
        // Verifica se √© string vazia ou inv√°lida
        if (!event.data || event.data.trim() === '') {
          console.warn('‚ö†Ô∏è Mensagem vazia recebida');
          return;
        }
        
        // Se tiver m√∫ltiplas mensagens JSON concatenadas, processa cada uma
        const messages = event.data.trim().split('\n').filter(line => line.trim());
        
        if (messages.length > 1) {
          console.warn('‚ö†Ô∏è M√∫ltiplas mensagens concatenadas detectadas! Processando separadamente...');
        }
        
        // Processa cada mensagem
        messages.forEach((msg, index) => {
          try {
            const data = JSON.parse(msg);
            console.log(`üì® Presen√ßa [${index + 1}/${messages.length}]:`, data);
            this.handleMessage(data);
          } catch (err) {
            console.error(`‚ùå Erro ao processar mensagem ${index + 1}:`, err);
            console.error('üìÑ Conte√∫do:', msg);
          }
        });
        
      } catch (error) {
        console.error('‚ùå Erro ao processar mensagem de presen√ßa:', error);
        console.error('üìÑ Conte√∫do recebido:', event.data);
        console.error('üìÑ Tipo:', typeof event.data);
        console.error('üìÑ Comprimento:', event.data?.length);
        
        // Tenta identificar o problema
        if (event.data && typeof event.data === 'string') {
          // Verifica se h√° m√∫ltiplas mensagens JSON concatenadas
          if (event.data.includes('}{')) {
            console.error('‚ö†Ô∏è M√∫ltiplas mensagens JSON concatenadas (sem quebra de linha)!');
            console.error('üí° Backend deve enviar uma mensagem por vez OU separar com \\n');
          }
          
          // Mostra primeiros caracteres para debug
          console.error('üîç Primeiros 200 chars:', event.data.substring(0, 200));
        }
      }
    };

    this.ws.onerror = (error) => {
      console.error('Erro no WebSocket de presen√ßa:', error);
    };

    this.ws.onclose = (event) => {
      console.log('WebSocket de presen√ßa desconectado:', event.code);
      this.stopHeartbeat();
      
      // Limpa todos os timeouts pendentes de offline
      this.clearAllOfflineTimeouts();
      
      // Dispara evento de desconex√£o
      window.dispatchEvent(new CustomEvent('presenceDisconnected'));
      
      if (!this.isIntentionallyClosed && this.reconnectAttempts < this.maxReconnectAttempts) {
        console.log(`Reconectando presen√ßa... (${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);
        this.scheduleReconnect();
      }
    };
  }

  // Processa mensagens recebidas
  handleMessage(data) {
    console.log('üì® Presen√ßa:', data);
    
    switch (data.type) {
      case 'CONNECTED':
        // Mensagem de confirma√ß√£o de conex√£o
        console.log('‚úÖ Conectado ao servi√ßo de presen√ßa:', data.message);
        break;
      
      case 'USER_ONLINE':
        // Usu√°rio ficou online
        this.onUserOnline(data.userId);
        break;
      
      case 'USER_OFFLINE':
        // Usu√°rio ficou offline
        this.onUserOffline(data.userId);
        break;
      
      case 'ONLINE_USERS':
        // Lista inicial de usu√°rios online
        this.onOnlineUsersList(data.onlineUsers || data.userIds || []);
        break;
      
      case 'USER_STATUS':
        // Status de chat espec√≠fico (isOnline do backend antigo)
        // Este evento deveria vir do WebSocket de chat, n√£o de presen√ßa
        // Vamos trat√°-lo como USER_ONLINE/USER_OFFLINE para compatibilidade
        if (data.isOnline !== undefined) {
          if (data.isOnline) {
            this.onUserOnline(data.userId);
          } else {
            this.onUserOffline(data.userId);
          }
        } else {
          console.log('‚ö†Ô∏è USER_STATUS sem campo isOnline:', data);
        }
        break;
      
      case 'PONG':
        // Resposta ao heartbeat
        break;
      
      default:
        console.log('‚ö†Ô∏è Mensagem de presen√ßa n√£o tratada:', data);
    }
  }

  // Callback quando usu√°rio fica online
  onUserOnline(userId) {
    if (userId == this.userId) return; // Ignora pr√≥prio usu√°rio
    
    // Cancela timeout de offline pendente (se houver)
    if (this.offlineTimeouts.has(userId)) {
      console.log(`‚è∏Ô∏è Cancelando timeout de offline para ${userId} (reconectou)`);
      clearTimeout(this.offlineTimeouts.get(userId));
      this.offlineTimeouts.delete(userId);
    }
    
    // Se j√° n√£o estava online, adiciona e dispara evento
    const wasOffline = !this.onlineUsers.has(userId);
    this.onlineUsers.add(userId);
    
    if (wasOffline) {
      console.log(`üü¢ Usu√°rio ${userId} est√° ONLINE`);
      
      window.dispatchEvent(new CustomEvent('userOnline', { 
        detail: { userId } 
      }));
    } else {
      console.log(`‚úÖ Usu√°rio ${userId} reconectou (permanece ONLINE)`);
    }
  }

  // Callback quando usu√°rio fica offline
  onUserOffline(userId) {
    if (userId == this.userId) return; // Ignora pr√≥prio usu√°rio
    
    // Verifica se j√° existe um timeout pendente
    if (this.offlineTimeouts.has(userId)) {
      console.log(`‚è±Ô∏è Timeout de offline j√° existe para ${userId}, ignorando...`);
      return;
    }
    
    console.log(`‚è≥ Usu√°rio ${userId} desconectou - aguardando ${this.OFFLINE_DELAY/1000}s antes de marcar como OFFLINE`);
    
    // Cria timeout de 5 segundos
    const timeoutId = setTimeout(() => {
      // Ap√≥s 5 segundos sem receber USER_ONLINE, marca como offline
      if (this.onlineUsers.has(userId)) {
        this.onlineUsers.delete(userId);
        console.log(`‚ö™ Usu√°rio ${userId} est√° OFFLINE (confirmado ap√≥s ${this.OFFLINE_DELAY/1000}s)`);
        
        window.dispatchEvent(new CustomEvent('userOffline', { 
          detail: { userId } 
        }));
      }
      
      // Remove timeout da lista
      this.offlineTimeouts.delete(userId);
    }, this.OFFLINE_DELAY);
    
    // Armazena o timeout
    this.offlineTimeouts.set(userId, timeoutId);
  }

  // Callback quando recebe lista de usu√°rios online
  onOnlineUsersList(userIds) {
    this.onlineUsers.clear();
    userIds.forEach(id => {
      if (id != this.userId) {
        this.onlineUsers.add(id);
      }
    });
    
    console.log(`üìã Usu√°rios online:`, Array.from(this.onlineUsers));
    
    window.dispatchEvent(new CustomEvent('onlineUsersListUpdated', { 
      detail: { userIds: Array.from(this.onlineUsers) } 
    }));
  }

  // Verifica se um usu√°rio est√° online
  isUserOnline(userId) {
    return this.onlineUsers.has(userId);
  }

  // Retorna lista de usu√°rios online
  getOnlineUsers() {
    return Array.from(this.onlineUsers);
  }

  // Heartbeat
  startHeartbeat() {
    this.heartbeatInterval = setInterval(() => {
      if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(JSON.stringify({ type: 'PING' }));
      }
    }, 30000);
  }

  stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
    }
  }

  // Reconex√£o
  scheduleReconnect() {
    this.reconnectAttempts++;
    
    if (this.reconnectAttempts <= this.maxReconnectAttempts) {
      setTimeout(() => {
        console.log('üîÑ Reconectando sistema de presen√ßa...');
        this.connect(this.userId, this.token);
      }, this.reconnectDelay * this.reconnectAttempts);
    } else {
      console.error('‚ùå N√∫mero m√°ximo de tentativas de reconex√£o de presen√ßa atingido');
    }
  }

  // Desconecta
  disconnect() {
    this.isIntentionallyClosed = true;
    this.stopHeartbeat();
    this.clearAllOfflineTimeouts();
    
    if (this.ws) {
      this.ws.close(1000, 'Desconex√£o intencional');
      this.ws = null;
    }
    
    this.onlineUsers.clear();
  }

  // Limpa todos os timeouts pendentes de offline
  clearAllOfflineTimeouts() {
    if (this.offlineTimeouts.size > 0) {
      console.log(`üßπ Limpando ${this.offlineTimeouts.size} timeouts de offline pendentes`);
      this.offlineTimeouts.forEach((timeoutId) => {
        clearTimeout(timeoutId);
      });
      this.offlineTimeouts.clear();
    }
  }

  // Verifica se est√° conectado
  isConnected() {
    return this.ws && this.ws.readyState === WebSocket.OPEN;
  }
}

// Inst√¢ncia global do gerenciador de presen√ßa
window.presenceManager = new PresenceManager();
